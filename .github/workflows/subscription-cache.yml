name: Update Subscription Info

on:
  schedule:
    - cron: '0 0 * * *' # 每天UTC时间0点运行
  workflow_dispatch: # 允许手动触发

jobs:
  update-subscription:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Parse subscriptions
        env:
          SUB1_URL: "http://106.75.143.245:3390/api/v1/client/subscribe?token=11c5c3e1ad18a246f761687490a80820"
          SUB2_URL: "https://sub1.qingze-quick.top/api/v1/client/subscribe?token=e39a8fb7c6ecc53aeb180ad3674d389f"
        run: |
          mkdir -p data
          node -e "
          const { promisify } = require('util');
          const exec = promisify(require('child_process').exec);
          const fs = require('fs');
          
          async function processSubscription(url, outputFile) {
            try {
              // 获取订阅内容
              const { stdout: encodedData } = await exec(`curl -sL '${url}' | base64 -w 0`);
          
              // 解析订阅内容
              const decodedData = Buffer.from(encodedData.trim(), 'base64').toString();
              let usage, expire, resetDay;
          
              if (decodedData.includes('proxies:')) { // Clash YAML格式
                const usageMatch = decodedData.match(/剩余流量：([\d.]+)\s*GB/);
                const expireMatch = decodedData.match(/套餐到期：([\d-]+)/);
                usage = usageMatch?.[1] + ' GB';
                expire = expireMatch?.[1];
              } else { // Trojan/Vmess URI列表
                const usageMatch = decodedData.match(/剩余流量：([\d.]+)\s*GB/);
                const resetMatch = decodedData.match(/距离下次重置剩余：(\d+)\s*天/);
                usage = usageMatch?.[1] + ' GB';
                resetDay = resetMatch?.[1] + ' 天';
              }
          
              // 生成JSON文件
              const output = {
                subscriptionContentBase64: encodedData.trim(),
                ...(usage && { usage }),
                ...(expire && { expire }),
                ...(resetDay && { resetDay }),
                updatedAt: new Date().toISOString()
              };
          
              fs.writeFileSync(outputFile, JSON.stringify(output, null, 2));
              console.log('成功更新:', outputFile);
          
            } catch (error) {
              console.error('处理订阅时出错:', error);
              process.exit(1);
            }
          }
          
          // 处理两个订阅
          await Promise.all([
            processSubscription(process.env.SUB1_URL, 'data/subscription_info_1.json'),
            processSubscription(process.env.SUB2_URL, 'data/subscription_info_2.json')
          ]);
          "

      - name: Commit changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add data/
          git commit -m "自动更新订阅信息 [skip ci]" || echo "没有变更需要提交"
          git push