name: Update Subscription Info

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-subscription:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Parse subscriptions
        env:
          SUB1_URL: "http://106.75.143.245:3390/api/v1/client/subscribe?token=11c5c3e1ad18a246f761687490a80820"
          SUB2_URL: "https://sub1.qingze-quick.top/api/v1/client/subscribe?token=e39a8fb7c6ecc53aeb180ad3674d389f"
        run: |
          mkdir -p data
          node -e "
          const { promisify } = require('util');
          const exec = promisify(require('child_process').exec);
          const fs = require('fs');
          
          async function fetchSubscription(url) {
            try {
              // 添加重试机制和超时设置
              const { stdout } = await exec(`curl -sL --retry 3 --max-time 30 '${url}'`, { timeout: 60000 });
              return stdout.trim();
            } catch (error) {
              console.error('获取订阅失败:', error.message);
              return null;
            }
          }
          
          async function processSubscription(url, outputFile) {
            try {
              console.log('正在处理订阅:', url);
          
              // 获取原始订阅内容
              const rawData = await fetchSubscription(url);
              if (!rawData) {
                console.log('跳过无效订阅');
                return;
              }
          
              // 验证Base64格式
              if (!/^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$/.test(rawData)) {
                console.log('检测到非Base64内容，尝试直接解析');
                const decodedData = rawData;
                return parseAndSave(decodedData, outputFile);
              }
          
              // Base64解码
              const decodedData = Buffer.from(rawData, 'base64').toString();
              return parseAndSave(decodedData, outputFile);
          
            } catch (error) {
              console.error('处理订阅时出错:', error);
              process.exit(1);
            }
          }
          
          function parseAndSave(data, outputFile) {
            try {
              console.log('解析内容:', data.substring(0, 200) + '...'); // 打印部分内容用于调试
          
              let result = {};
              // 增强型正则表达式
              const usageMatch = data.match(/(剩余流量|traffic|usage)[：:]?\s*([\d.]+)\s*(GB|GiB)/i);
              const expireMatch = data.match(/(到期时间|expire)[：:]?\s*(\d{4}-\d{2}-\d{2})/i);
              const resetMatch = data.match(/(重置剩余|reset)[：:]?\s*(\d+)\s*天/i);
          
              if (usageMatch) result.usage = `${usageMatch[2]} ${usageMatch[3] || 'GB'}`;
              if (expireMatch) result.expire = expireMatch[2];
              if (resetMatch) result.resetDay = `${resetMatch[2]} 天`;
          
              // 保留完整数据并添加校验
              result = {
                subscriptionContentBase64: Buffer.from(data).toString('base64'),
                ...result,
                updatedAt: new Date().toISOString(),
                checksum: createChecksum(data)
              };
          
              fs.writeFileSync(outputFile, JSON.stringify(result, null, 2));
              console.log('成功更新:', outputFile);
          
            } catch (error) {
              console.error('解析失败:', error);
              throw error;
            }
          }
          
          function createChecksum(str) {
            return require('crypto')
              .createHash('sha256')
              .update(str)
              .digest('hex')
              .substring(0, 16);
          }
          
          // 处理订阅
          await Promise.all([
            processSubscription(process.env.SUB1_URL, 'data/subscription_info_1.json'),
            processSubscription(process.env.SUB2_URL, 'data/subscription_info_2.json')
          ]);
          "

      - name: Commit changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add data/
          git commit -m "自动更新订阅信息 [skip ci]" || echo "没有变更需要提交"
          git push